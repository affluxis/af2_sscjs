//
//  main.asc, sample_playlist
//  Affluxis - support@affluxis.com
//
//  Created by Affluxis on 30/11/2022.
//  Copyright © 2022 Affluxis. All rights reserved.
//

var rtmp = 'rtmp://demo.affluxis.com:1935/';

var app, inst, vhost;
var s, soLyt, soOvrl;
var lyt = 0;
var isAspect = isBg = isPip = isStream = false;
var ovrlys = { enabled: true, status: { 0: true, 1: true, 2: true } };
var pubs = {};
var users = {};

function initBg() {
  if (isBg === true) return;
  isBg = true;
  var f = Af2FFmpeg.get('bg');
  f.onStatus = function (info) {
    trace(info.name + ':' + info.code + ':' + info.descript);
    if (info.descript !== null && info.descript.includes('speed=') === true && info.descript.endsWith('speed=N/A') === false) {
      initPub({ name: 'bg' });
      delete this.onStatus;
    }
  };
  var out = ' -f flv ' + rtmp + 'affluxis?parameters=bg&vhost=' + vhost + '&app=' + app + '&inst=' + inst + '/affluxis/' + vhost + '/' + app + '/' + inst + '/bg';
  f.send('-re -loop 1 -i /opt/affluxis/applications/live/page-title-img.jpg -an ' + out);
}
function initLyt(event) {
  isAspect = event.isAspect;
  isPip = event.isPip;
  lyt = parseInt(event.lyt);
  soLyt.setProperty('lyt', { isAspect: isAspect, isPip: isPip, lyt: lyt });
  initLayout();
}
function initLayout() {
  var ndx = 0;
  var arr = [];
  var opts = [];
  for (var i in pubs) arr.push({ name: pubs[i].name, ts: pubs[i].ts });
  arr.sort(function (a, b) {
    return a.ts - b.ts;
  });
  var len = arr.length;
  if (len === 0 || len > 6) return;
  switch (len) {
    case 1: opts.push({ index: ndx, name: arr[0].name, height: { canvasOperation: 'equalHeight' }, width: { canvasOperation: 'equalWidth' } }); break;
    case 2:
      for (var i in arr) {
        var o = { index: ndx, name: arr[i].name, height: { canvasOperation: 'equalHeight' }, width: { canvasOperation: 'equalWidth' } };
        opts.push(o);
        ndx++;
      }
      break;
    case 3:
      for (var i in arr) {
        var o = { isAspectRatio: isAspect, index: ndx, name: arr[i].name };
        if (lyt === 0 && isPip === false) {
          o.width = { canvasOperation: 'equalWidth' };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              break;
            case 1:
              o.align = 'top';
              o.height = { canvasOperation: 'divideHeight', canvasValue: 1.5 };
              break;
            case 2:
              o.align = 'bottomCenter';
              o.height = { canvasOperation: 'divideHeight', canvasValue: 3 };
              break;
          }
        } else if (lyt === 1 && isPip === false) {
          o.height = { canvasOperation: 'equalHeight' };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'left';
              o.width = { canvasOperation: 'multiplyWidth', canvasValue: 0.75 };
              break;
            case 2:
              o.align = 'right';
              o.width = { canvasOperation: 'divideWidth', canvasValue: 4 };
              break;
          }
        } else if (lyt === 2 && isPip === false) {
          o.height = { canvasOperation: 'divideHeight', canvasValue: 2 };
          o.width = { canvasOperation: 'equalWidth' };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              break;
            case 1: o.align = 'top'; break;
            case 2: o.align = 'bottomCenter'; break;
          }
        } else if (lyt === 3 && isPip === false) {
          o.height = { canvasOperation: 'equalHeight' };
          o.width = { canvasOperation: 'divideWidth', canvasValue: 2 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1: o.align = 'left'; break;
            case 2: o.align = 'right'; break;
          }
        } else if ((lyt === 0 && isPip === true) === true || (lyt === 1 && isPip === true) === true) {
          o.align = 'left';
          o.height = { canvasOperation: 'multiplyHeight', canvasValue: 0.3 };
          o.width = { canvasOperation: 'multiplyWidth', canvasValue: 0.3 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'center';
              o.height = { canvasOperation: 'equalHeight' };
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 2:
              o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.685 };
              o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.675 };
              break;
          }
        } else if (lyt === 2 && isPip === true) {
          o.align = 'left';
          o.height = { canvasOperation: 'multiplyHeight', canvasValue: 0.21875 };
          o.width = { canvasOperation: 'multiplyWidth', canvasValue: 0.21875 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'center';
              o.height = { canvasOperation: 'equalHeight' };
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 2:
              o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.76625 };
              o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.75625 };
              break;
          }
        } else if (lyt === 3 && isPip === true) {
          o.align = 'left';
          o.height = { canvasOperation: 'multiplyHeight', canvasValue: 0.21875 };
          o.width = { canvasOperation: 'multiplyWidth', canvasValue: 0.23125 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'center';
              o.height = { canvasOperation: 'equalHeight' };
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 2:
              o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.75375 };
              o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.75625 };
              break;
          }
        }
        opts.push(o);
        ndx++;
      }
      break;
    case 4:
      for (var i in arr) {
        var o = { isAspectRatio: isAspect, index: ndx, name: arr[i].name };
        if (lyt === 0 && isPip === false) {
          o.height = { canvasOperation: 'multiplyHeight', canvasValue: 0.3 };
          o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.7 };
          o.width = { canvasOperation: 'divideWidth', canvasValue: 2 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'top';
              o.height = { canvasOperation: 'multiplyHeight', canvasValue: 0.7 };
              o.paddingTop = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 2: o.align = 'left'; break;
            case 3: o.align = 'right'; break;
          }
        } else if (lyt === 1 && isPip === false) {
          o.align = 'right';
          o.height = { canvasOperation: 'divideHeight', canvasValue: 2 };
          o.width = { canvasOperation: 'divideWidth', canvasValue: 2 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'left';
              o.height = { canvasOperation: 'equalHeight' };
              break;
            case 3: o.paddingTop = { canvasOperation: 'divideHeight', canvasValue: 2 }; break;
          }
        } else if (lyt === 2 && isPip === false) {
          o.height = { canvasOperation: 'divideHeight', canvasValue: 3 };
          o.width = { canvasOperation: 'equalWidth' };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              break;
            case 1: o.align = 'top'; break;
            case 2: o.align = 'bottomCenter'; break;
          }
        } else if (lyt === 3 && isPip === false) {
          o.height = { canvasOperation: 'equalHeight' };
          o.width = { canvasOperation: 'divideWidth', canvasValue: 3 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1: o.align = 'left'; break;
            case 2: o.align = 'right'; break;
          }
        } else if (lyt === 0 && isPip === true) {
          o.align = 'left';
          o.height = { canvasOperation: 'multiplyHeight', canvasValue: 0.3 };
          o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.685 };
          o.width = { canvasOperation: 'multiplyWidth', canvasValue: 0.3 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingLeft = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'center';
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingLeft = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 2: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.35 }; break;
            case 3: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.675 }; break;
          }
        } else if (lyt === 1 && isPip === true) {
          o.align = 'left';
          o.height = { canvasOperation: 'multiplyHeight', canvasValue: 0.3 };
          o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.685 };
          o.width = { canvasOperation: 'multiplyWidth', canvasValue: 0.3 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingLeft = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'center';
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingLeft = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 2: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.025 }; break;
            case 3: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.675 }; break;
          }
        } else if (lyt === 2 && isPip === true) {
          o.align = 'left';
          o.height = { canvasOperation: 'multiplyHeight', canvasValue: 0.21875 };
          o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.76625 };
          o.width = { canvasOperation: 'multiplyWidth', canvasValue: 0.21875 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingLeft = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'center';
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingLeft = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 2: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.5125 }; break;
            case 3: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.75625 }; break;
          }
        } else if (lyt === 3 && isPip === true) {
          o.align = 'left';
          o.height = { canvasOperation: 'multiplyHeight', canvasValue: 0.21875 };
          o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.75625 };
          o.width = { canvasOperation: 'multiplyWidth', canvasValue: 0.23125 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingTop = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'center';
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingTop = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 2: o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.5075 }; break;
            case 3: o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.75375 }; break;
          }
        }
        opts.push(o);
        ndx++;
      }
      break;
    case 5:
      for (var i in arr) {
        var o = { isAspectRatio: isAspect, index: ndx, name: arr[i].name };
        if (lyt === 0 && isPip === false) {
          o.align = 'bottom';
          o.height = { canvasOperation: 'divideHeight', canvasValue: 3 };
          o.width = { canvasOperation: 'divideWidth', canvasValue: 3 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'left';
              o.height = { canvasOperation: 'equalHeight' };
              o.width = { canvasOperation: 'divideWidth', canvasValue: 1.5 };
              break;
            case 2: o.align = 'right'; break;
            case 3:
              o.paddingBottom = { canvasOperation: 'divideHeight', canvasValue: 3 };
              o.paddingLeft = { canvasOperation: 'divideWidth', canvasValue: 1.5 };
              break;
            case 4: o.paddingLeft = { canvasOperation: 'divideWidth', canvasValue: 1.5 }; break;
          }
        } else if (lyt === 1 && isPip === false) {
          o.align = 'right';
          o.height = { canvasOperation: 'divideHeight', canvasValue: 2 };
          o.width = { canvasOperation: 'divideWidth', canvasValue: 2 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1: o.align = 'left'; break;
            case 3:
              o.align = 'left';
              o.paddingTop = { canvasOperation: 'divideHeight', canvasValue: 2 };
              break;
            case 4: o.paddingTop = { canvasOperation: 'divideHeight', canvasValue: 2 }; break;
          }
        } else if (lyt === 2 && isPip === false) {
          o.align = 'left';
          o.height = { canvasOperation: 'divideHeight', canvasValue: 4 };
          o.width = { canvasOperation: 'equalWidth' };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              break;
            case 2: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.25 }; break;
            case 3: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.5 }; break;
            case 4: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.75 }; break;
          }
        } else if (lyt === 3 && isPip === false) {
          o.align = 'right';
          o.height = { canvasOperation: 'equalHeight' };
          o.width = { canvasOperation: 'divideWidth', canvasValue: 4 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1: o.align = 'left'; break;
            case 2:
              o.align = 'left';
              o.paddingLeft = { canvasOperation: 'divideWidth', canvasValue: 4 }
              break;
            case 3: o.paddingRight = { canvasOperation: 'divideWidth', canvasValue: 4 }; break;
          }
        } else if (lyt === 0 && isPip === true) {
          o.align = 'left';
          o.height = { canvasOperation: 'multiplyHeight', canvasValue: 0.3 };
          o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.685 };
          o.width = { canvasOperation: 'multiplyWidth', canvasValue: 0.3 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingLeft = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'center';
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingLeft = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 2: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.025 }; break;
            case 3: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.35 }; break;
            case 4: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.675 }; break;
          }
        } else if (lyt === 1 && isPip === true) {
          o.align = 'left';
          o.height = { canvasOperation: 'multiplyHeight', canvasValue: 0.3 };
          o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.685 };
          o.width = { canvasOperation: 'multiplyWidth', canvasValue: 0.3 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingLeft = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'center';
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingLeft = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 2:
              o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.015 };
              o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.675 };
              break;
            case 3: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.025 }; break;
            case 4: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.675 }; break;
          }
        } else if (lyt === 2 && isPip === true) {
          o.align = 'left';
          o.height = { canvasOperation: 'multiplyHeight', canvasValue: 0.21875 };
          o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.76625 };
          o.width = { canvasOperation: 'multiplyWidth', canvasValue: 0.21875 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingLeft = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'center';
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingLeft = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 2: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.26875 }; break;
            case 3: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.5125 }; break;
            case 4: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.75625 }; break;
          }
        } else if (lyt === 3 && isPip === true) {
          o.align = 'left';
          o.height = { canvasOperation: 'multiplyHeight', canvasValue: 0.21875 };
          o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.75625 };
          o.width = { canvasOperation: 'multiplyWidth', canvasValue: 0.23125 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingTop = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'center';
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingTop = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 2: o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.26125 }; break;
            case 3: o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.5075 }; break;
            case 4: o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.75375 }; break;
          }
        }
        opts.push(o);
        ndx++;
      }
      break;
    case 6:
      for (var i in arr) {
        var o = { isAspectRatio: isAspect, index: ndx, name: arr[i].name };
        if (lyt === 0 && isPip === false) {
          o.align = 'right';
          o.height = { canvasOperation: 'divideHeight', canvasValue: 3 };
          o.width = { canvasOperation: 'divideWidth', canvasValue: 3 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'top';
              o.height = { canvasOperation: 'divideHeight', canvasValue: 2 };
              o.width = { canvasOperation: 'divideWidth', canvasValue: 1.5 };
              break;
            case 2:
              o.align = 'bottom';
              o.height = { canvasOperation: 'divideHeight', canvasValue: 2 };
              o.width = { canvasOperation: 'divideWidth', canvasValue: 1.5 };
              break;
            case 4: o.paddingTop = { canvasOperation: 'divideHeight', canvasValue: 3 }; break;
            case 5: o.paddingTop = { canvasOperation: 'divideHeight', canvasValue: 1.5 }; break;
          }
        } else if (lyt === 1 && isPip === false) {
          o.align = 'right';
          o.height = { canvasOperation: 'divideHeight', canvasValue: 2 };
          o.width = { canvasOperation: 'divideWidth', canvasValue: 4 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'left';
              o.height = { canvasOperation: 'equalHeight' };
              o.width = { canvasOperation: 'divideWidth', canvasValue: 2 };
              break;
            case 2: o.paddingRight = { canvasOperation: 'divideWidth', canvasValue: 4 }; break;
            case 4:
              o.paddingRight = { canvasOperation: 'divideWidth', canvasValue: 4 };
              o.paddingTop = { canvasOperation: 'divideHeight', canvasValue: 2 };
              break;
            case 5: o.paddingTop = { canvasOperation: 'divideHeight', canvasValue: 2 }; break;
          }
        } else if (lyt === 2 && isPip === false) {
          o.align = 'bottom';
          o.height = { canvasOperation: 'divideHeight', canvasValue: 5 };
          o.width = { canvasOperation: 'equalWidth' };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              break;
            case 1: o.align = 'top'; break;
            case 2:
              o.align = 'top';
              o.paddingTop = { canvasOperation: 'divideHeight', canvasValue: 5 };
              break;
            case 3: o.paddingBottom = { canvasOperation: 'divideHeight', canvasValue: 2.5 }; break;
            case 4: o.paddingBottom = { canvasOperation: 'divideHeight', canvasValue: 5 }; break;
          }
        } else if (lyt === 3 && isPip === false) {
          o.align = 'right';
          o.height = { canvasOperation: 'equalHeight' };
          o.width = { canvasOperation: 'divideWidth', canvasValue: 5 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1: o.align = 'left'; break;
            case 2:
              o.align = 'left';
              o.paddingLeft = { canvasOperation: 'divideWidth', canvasValue: 5 };
              break;
            case 3: o.paddingRight = { canvasOperation: 'divideWidth', canvasValue: 2.5 }; break;
            case 4: o.paddingRight = { canvasOperation: 'divideWidth', canvasValue: 5 }; break;
          }
        } else if (lyt === 0 && isPip === true) {
          o.align = 'left';
          o.height = { canvasOperation: 'multiplyHeight', canvasValue: 0.3 };
          o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.685 };
          o.width = { canvasOperation: 'multiplyWidth', canvasValue: 0.3 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingLeft = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'center';
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingLeft = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 2:
              o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.025 };
              o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.675 };
              break;
            case 3: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.025 }; break;
            case 4: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.35 }; break;
            case 5: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.675 }; break;
          }
        } else if (lyt === 1 && isPip === true) {
          o.align = 'left';
          o.height = { canvasOperation: 'multiplyHeight', canvasValue: 0.3 };
          o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.685 };
          o.width = { canvasOperation: 'multiplyWidth', canvasValue: 0.3 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingLeft = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'center';
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingLeft = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 2:
              o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.015 };
              o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.025 };
              break;
            case 3:
              o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.015 };
              o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.675 };
              break;
            case 4: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.025 }; break;
            case 5: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.675 }; break;
          }
        } else if (lyt === 2 && isPip === true) {
          o.align = 'left';
          o.height = { canvasOperation: 'multiplyHeight', canvasValue: 0.21875 };
          o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.76625 };
          o.width = { canvasOperation: 'multiplyWidth', canvasValue: 0.21875 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingLeft = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'center';
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingLeft = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 2: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.025 }; break;
            case 3: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.26875 }; break;
            case 4: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.5125 }; break;
            case 5: o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.75625 }; break;
          }
        } else if (lyt === 3 && isPip === true) {
          o.align = 'left';
          o.height = { canvasOperation: 'multiplyHeight', canvasValue: 0.21875 };
          o.paddingTop = { canvasOperation: 'multiplyHeight', canvasValue: 0.75625 };
          o.width = { canvasOperation: 'multiplyWidth', canvasValue: 0.23125 };
          switch (ndx) {
            case 0:
              o.isAspectRatio = false;
              o.align = 'center';
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingLeft = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 1:
              o.align = 'center';
              o.height = { canvasOperation: 'equalHeight' };
              o.paddingTop = {};
              o.width = { canvasOperation: 'equalWidth' };
              break;
            case 2: o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.015 }; break;
            case 3: o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.26125 }; break;
            case 4: o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.5075 }; break;
            case 5: o.paddingLeft = { canvasOperation: 'multiplyWidth', canvasValue: 0.75375 }; break;
          }
        }
        opts.push(o);
        ndx++;
      }
      break;
  }
  trace('play: ' + JSON.stringify(opts));
  return s.play(opts);
}
function initOverlay(info) {
  trace('initOverlay: ' + info.name);
  var name = info.name;
  var c = soOvrl.getProperty('ovr');
  if (c['status'][name] === false) {
    uninitOverlay(info);
    return;
  }
  c['enabled'] = false;
  c['status'][name] = false;
  soOvrl.setProperty('ovr', c);
  var dir = '/opt/affluxis/applications/live/';
  var inp = dir + 'sample1_1500kbps.f4v';
  var fltr = '  ';
	if(name === '1') fltr = ' -filter_complex "[0:v]colorchannelmixer=0.300:0.400:0.300:0.000:0.300:0.400:0.300:0.000:0.300:0.400:0.300:0.000:0.000:0.000:0.000:1.000[v]" -map "[v]" '; // bw
	if(name === '2') fltr = ' -filter_complex "[0:v]colorchannelmixer=0.393:0.769:0.189:0.000:0.349:0.686:0.168:0.000:0.272:0.534:0.131:0.000:0.000:0.000:0.000:1.000[v]" -map "[v]" '; // sepia
	if(name === '3') inp = dir + 'sample.flv';
	if(name === '4') {
		inp = dir + 'sample1_1500kbps.f4v';
		fltr = ' -an '; // no audio
	}
  var c = ' -c:a aac -c:v h264 ';
  var out = ' -f flv ' + rtmp + 'affluxis?parameters=overlay' + name + '&vhost=' + vhost + '&app=' + app + '&inst=' + inst + '/affluxis/' + vhost + '/' + app + '/' + inst + '/overlay' + name;
  var cmd = ' -re -i ' + inp + fltr + c + out;
  var f = Af2FFmpeg.get('overlay' + name);
  f.onStatus = function (info) {
    trace(info.name + ':' + info.code + ':' + info.descript);
    if (info.descript !== null && info.descript.includes('speed=') === true && info.descript.endsWith('speed=N/A') === false) {
      var c = soOvrl.getProperty('ovr');
      c['enabled'] = true;
      soOvrl.setProperty('ovr', c);
      initPub({ name: info.name });
      delete this.onStatus;
    }
  };
  trace('cmd: ' + cmd);
  f.send(cmd);
}
function uninitOverlay(info) {
  trace('uninitOverlay: ' + info.name);
  var name = info.name;
  var c = soOvrl.getProperty('ovr');
  c['enabled'] = false;
  c['status'][name] = true;
  soOvrl.setProperty('ovr', c);
  var f = Af2FFmpeg.get('overlay' + name);
  f.send(false);
}
function postUninitOverlay(info) {
  trace('postUninitOverlay: ' + info.name);
  var name = info.name;
  var len = name.length;
  var sub = name.substring(len - 1, len);
  var c = soOvrl.getProperty('ovr');
  c['enabled'] = true;
  c['status'][sub] = true;
  soOvrl.setProperty('ovr', c);
  uninitPub(info);
}
function initPub(info) {
  trace('initPub: ' + info.name);
  var name = info.name;
  var ts = new Date().valueOf();
  pubs[name] = { name: name, protocol: info.protocol, ts: ts };
  initLayout();
}
function uninitPub(info) {
  trace('uninitPub: ' + info.name);
  var name = info.name;
  if (pubs[name] === undefined) return;
  delete pubs[name];
  initLayout();
}
function initS() {
  if (isStream === true) return;
  isStream = true;
  s = Af2Stream.get('live');
}
function uninitS() {
	var isWebrtc = false;
	var clients = Af2Application.clients;
	for(var i in clients) {
		if(clients[i].protocol === 'webrtc') {
			isWebrtc = true;
			break;
		}
	}
	// var len = Object.keys(Af2Application.clients).length;
	if(isStream === false || isWebrtc === true) return;
	isBg = isStream = false;
	for(var i = 0; i < 3; i++) {
		var f = Af2FFmpeg.get('overlay' + i);
		f.send(false);
	}
	s.close();
	var f = Af2FFmpeg.get('bg');
	f.send(false);
	var c = soOvrl.getProperty('ovr');
	c['enabled'] = true;
	soOvrl.setProperty('ovr', c);
}
Af2Application.onAppStart = function() {
	app = Af2Application.application;
	inst = Af2Application.instance;
	vhost = Af2Application.vhost;
	soLyt = Af2SharedObject.get('lyt');
	soLyt.setProperty('lyt', { isAspect: isAspect, isPip: isPip, lyt: lyt });
	soOvrl = Af2SharedObject.get('ovr');
	soOvrl.setProperty('ovr', { enabled: true, status: { 0: true, 1: true, 2: true, 3: true, 4: true } });
	trace('onAppStart: ' + Af2Application.application + ':' + Af2Application.instance);
};
Af2Application.onStatus = function(info) {
	// trace('------------ onStatus: ' + info.code + ':' + info.level + ':' + info.descript);
};
Af2Application.onConnect = function(client, parameters) {
	trace('onConnect ' + Af2Application.application + ': ' + client.ip + ':' + client.agent + ':' + parameters.name + ':' + parameters);
	if(client.agent === 'encoder') {
		if(parameters.startsWith('overlay') === true) users[client.id] = parameters;
	} else {
		users[client.id] = parameters.name;
		client.initBg = initBg;
		client.initLyt = initLyt;
		client.initOverlay = initOverlay;
		client.initPub = initPub;
		client.uninitPub = uninitPub;
	}
	initS();
	return true;
};
Af2Application.onDisconnect = function(client) {
	trace('disconnect ' + Af2Application.application + ': ' + client.ip + ':' + client.id);
	uninitS();
	var id = client.id;
	var user = users[id];
	if(user === undefined) return;
	if(user.startsWith('overlay') === true) postUninitOverlay({ name: user });
	var pub = pubs[user];
	if(pub !== undefined) uninitPub({ name: pub.name });
};
