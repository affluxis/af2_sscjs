//
//  main.asc, sample_rec
//  Affluxis - support@affluxis.com
//
//  Created by Affluxis on 28/11/2022.
//  Copyright © 2022 Affluxis. All rights reserved.
//

var rtmp = 'rtmp://demo.affluxis.com:1935/';

var isRec;
var app, cur, inst, vhost;
var f, fi, name, so;
var pubs = {};
var recs = {};
var users = {};

function initRec(info) {
	trace('initRec: ' + info.name);
	name = info.name;
	recs[name] = { name: name };
	fi = new Af2File('wwwroot/' + app + '/streams/' + inst + '/');
	fi.mkdir();
	cur = new Date().valueOf();
	var cmd = '-y -re -vsync 0 -i ' + rtmp + 'affluxis?parameters=rec&vhost=' + vhost + '&app=' + app + '&inst=' + inst + '/affluxis/' + vhost + '/' + app + '/' + inst + '/' + name + ' -c:v h264 -c:a aac ' + fi.toString() + cur + '.mp4';
	f = Af2FFmpeg.get(name);
	f.onStatus = function (info) {
		trace(info.name + ':' + info.code + ':' + info.descript);
		if (info.code === 'Af2FFmpeg.Command.Complete') initThumb();
		if (info.descript === null) return;
		if (info.descript.includes('speed=') === false && info.descript.endsWith('speed=N/A') === true) return;
		if (isRec === true) return;
		isRec = true;
		Af2Application.clients[pubs[name]].call('initRec');
	};
	f.send(cmd);
}
function uninitRec(info) {
	trace('uninitRec: ' + info.name);
	name = info.name;
	if (recs[name] === undefined) return;
	delete recs[name];
}
function initThumb() {
	trace('initThumb');
	isRec = false;
	var cl = Af2Application.clients[pubs[name]];
	if (cl !== undefined) cl.call('uninitRec');
	var fileSrc = new Af2File('wwwroot/' + app + '/streams/' + inst + '/');
	var fileTar = new Af2File('wwwroot/' + app + '/snapshots/' + inst + '/');
	fileTar.mkdir();
	var cmd = '-y -i ' + fileSrc.toString() + cur + '.mp4 -ss 00:00:01.000 -vframes 1 ' + fileTar.toString() + cur + '.jpg';
	f = Af2FFmpeg.get('thumb');
	f.onStatus = function (info) {
		trace(info.name + ':' + info.code + ':' + info.descript);
		if (info.code === 'Af2FFmpeg.Command.Complete') {
			var rcs = so.getProperty('recs');
			if (rcs === undefined) so.setProperty('recs', { recs: [] });
			rcs = so.getProperty('recs').recs;
			rcs.push({ created: new Date(), name: cur + '.jpg', video: cur + '.mp4' });
			so.setProperty('recs', { recs: rcs });
		}
	};
	trace('snapshot: ' + cmd);
	f.send(cmd);
}
Af2Application.onAppStart = function () {
	isRec = false;
	app = Af2Application.application;
	inst = Af2Application.instance;
	vhost = Af2Application.vhost;
	so = Af2SharedObject.get('rec', true);
	trace('onAppStart: ' + Af2Application.application + ':' + Af2Application.instance);
};
Af2Application.onStatus = function (info) {
	// trace('onStatus: ' + info.code + ':' + info.level + ':' + info.descript);
};
Af2Application.onConnect = function (client, parameters) {
	trace('onConnect ' + Af2Application.application + ': ' + client.ip + ':' + client.agent + ':' + parameters.name + ':' + parameters);
	if (client.agent === 'encoder') {
		users[client.id] = 'rec';
	} else {
		pubs[parameters.name] = client.id;
		users[client.id] = parameters.name;
		client.initRec = initRec;
		client.uninitRec = uninitRec;
	}
	return true;
};
Af2Application.onDisconnect = function (client) {
	trace('onDisconnect ' + Af2Application.application + ': ' + client.ip + ':' + client.id);
	var user = users[client.id];
	var rec = recs[user];
	if (user === undefined) return;
	if (rec !== undefined) uninitRec({ name: rec.name });
};
